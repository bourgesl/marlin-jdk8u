diff -Nur zulu/m01.8143849.webrev/raw_files/new/src/ jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/
diff -Nur zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/FloatMath.java jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/FloatMath.java
--- zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/FloatMath.java	2019-09-19 20:53:28.000000000 +0200
+++ jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/FloatMath.java	2019-10-17 21:55:09.438302528 +0200
@@ -210,4 +210,14 @@
         }
         return intpart - 1;
     }
+
+    /**
+     * Returns a floating-point power of two in the normal range.
+     */
+    static double powerOfTwoD(int n) {
+        assert (n >= DoubleConsts.MIN_EXPONENT && n <= DoubleConsts.MAX_EXPONENT);
+        return Double.longBitsToDouble((((long) n + (long) DoubleConsts.EXP_BIAS)
+                << (DoubleConsts.SIGNIFICAND_WIDTH - 1))
+                & DoubleConsts.EXP_BIT_MASK);
+    }
 }
diff -Nur zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/MarlinCache.java jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/MarlinCache.java
--- zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/MarlinCache.java	2019-09-19 20:53:30.000000000 +0200
+++ jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/MarlinCache.java	2019-10-17 21:54:39.137601025 +0200
@@ -25,7 +25,7 @@
 
 package sun.java2d.marlin;
 
-import sun.misc.Unsafe;
+import jdk.internal.misc.Unsafe;
 
 /**
  * An object used to cache pre-rendered complex paths.
diff -Nur zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/MarlinTileGenerator.java jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/MarlinTileGenerator.java
--- zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/MarlinTileGenerator.java	2019-09-19 20:53:33.000000000 +0200
+++ jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/MarlinTileGenerator.java	2019-10-17 21:54:02.560754220 +0200
@@ -26,7 +26,7 @@
 package sun.java2d.marlin;
 
 import sun.java2d.pipe.AATileGenerator;
-import sun.misc.Unsafe;
+import jdk.internal.misc.Unsafe;
 
 final class MarlinTileGenerator implements AATileGenerator, MarlinConst {
 
diff -Nur zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/MarlinUtils.java jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/MarlinUtils.java
--- zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/MarlinUtils.java	2019-09-19 20:53:33.000000000 +0200
+++ jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/MarlinUtils.java	2019-10-17 21:53:53.040533814 +0200
@@ -25,8 +25,8 @@
 
 package sun.java2d.marlin;
 
-import sun.misc.JavaLangAccess;
-import sun.misc.SharedSecrets;
+import jdk.internal.misc.JavaLangAccess;
+import jdk.internal.misc.SharedSecrets;
 
 public final class MarlinUtils {
     // TODO: use sun.util.logging.PlatformLogger once in JDK9
diff -Nur zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/OffHeapArray.java jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/OffHeapArray.java
--- zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/OffHeapArray.java	2019-09-19 20:53:35.000000000 +0200
+++ jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/OffHeapArray.java	2019-10-17 21:53:12.615597920 +0200
@@ -31,8 +31,8 @@
 import java.security.PrivilegedAction;
 import java.util.Vector;
 import static sun.java2d.marlin.MarlinConst.logUnsafeMalloc;
-import sun.misc.ThreadGroupUtils;
-import sun.misc.Unsafe;
+import sun.awt.util.ThreadGroupUtils;
+import jdk.internal.misc.Unsafe;
 
 /**
  *
diff -Nur zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/Renderer.java jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/Renderer.java
--- zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/marlin/Renderer.java	2019-09-19 20:53:35.000000000 +0200
+++ jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/marlin/Renderer.java	2019-10-17 21:52:58.579272961 +0200
@@ -28,7 +28,7 @@
 import java.util.Arrays;
 import sun.awt.geom.PathConsumer2D;
 import static sun.java2d.marlin.OffHeapArray.SIZE_INT;
-import sun.misc.Unsafe;
+import jdk.internal.misc.Unsafe;
 
 final class Renderer implements PathConsumer2D, MarlinConst {
 
@@ -40,7 +40,7 @@
     private static final int ALL_BUT_LSB = 0xfffffffe;
     private static final int ERR_STEP_MAX = 0x7fffffff; // = 2^31 - 1
 
-    private static final double POWER_2_TO_32 = 0x1.0p32;
+    private static final double POWER_2_TO_32 = FloatMath.powerOfTwoD(32);
 
     // use float to make tosubpix methods faster (no int to float conversion)
     public static final float f_SUBPIXEL_POSITIONS_X
diff -Nur zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/pipe/RenderingEngine.java jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/pipe/RenderingEngine.java
--- zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/pipe/RenderingEngine.java	2019-09-19 20:53:23.000000000 +0200
+++ jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/pipe/RenderingEngine.java	2019-10-17 21:50:27.487774974 +0200
@@ -32,7 +32,6 @@
 
 import java.security.PrivilegedAction;
 import java.security.AccessController;
-import java.util.ServiceLoader;
 import sun.security.action.GetPropertyAction;
 
 import sun.awt.geom.PathConsumer2D;
@@ -67,7 +66,7 @@
  * line width can get before dropouts occur.  Rendering with a BasicStroke
  * is defined to never allow the line to have breaks, gaps, or dropouts
  * even if the width is set to 0.0f, so this information allows the
- * {@link SunGraphics2D} class to detect the "thin line" case and set
+ * {@link sun.java2d.SunGraphics2D} class to detect the "thin line" case and set
  * the rendering attributes accordingly.
  * </dl>
  * At startup the runtime will load a single instance of this class.
@@ -97,12 +96,14 @@
      * </pre>
      *
      * If no specific {@code RenderingEngine} is specified on the command
-     * or Ductus renderer is specified, it will attempt loading the
-     * sun.dc.DuctusRenderingEngine class using Class.forName as a fastpath;
-     * if not found, use the ServiceLoader.
-     * If no specific {@code RenderingEngine} is specified on the command
-     * line then the last one returned by enumerating all subclasses of
-     * {@code RenderingEngine} known to the ServiceLoader is used.
+     * line or the requested class fails to load, then the Marlin
+     * renderer will be used as the default.
+     * <p>
+     * A printout of which RenderingEngine is loaded and used can be
+     * enabled by specifying the runtime flag:
+     * <pre>
+     *     java -Dsun.java2d.renderer.verbose=true
+     * </pre>
      * <p>
      * Runtime tracing of the actions of the {@code RenderingEngine}
      * can be enabled by specifying the runtime flag:
@@ -117,53 +118,39 @@
             return reImpl;
         }
 
-        reImpl =
-            AccessController.doPrivileged(new PrivilegedAction<RenderingEngine>() {
-                public RenderingEngine run() {
-                    final String ductusREClass = "sun.dc.DuctusRenderingEngine";
-                    final String marlinREClass = "sun.java2d.marlin.MarlinRenderingEngine";
-
-                    String reClass = System.getProperty("sun.java2d.renderer");
-                    if (reClass == null || reClass.equals(ductusREClass)) {
-                        try {
-                            Class<?> cls = Class.forName(ductusREClass);
-                            return (RenderingEngine) cls.newInstance();
-                        } catch (ReflectiveOperationException ignored) {
-                            // not found
-                        }
-                    }
-
-                    ServiceLoader<RenderingEngine> reLoader =
-                            ServiceLoader.loadInstalled(RenderingEngine.class);
-
-                    RenderingEngine service = null;
-                    RenderingEngine marlinService = null;
-
-                    for (RenderingEngine re : reLoader) {
-                        service = re;
-                        String serviceName = re.getClass().getName();
-                        if (serviceName.equals(reClass)) {
-                            return service;
-                        }
-                        if (serviceName.equals(marlinREClass)) {
-                            marlinService = service;
-                        }
-                    }
-                    // use Marlin as default renderer
-                    if (marlinService != null) {
-                        return marlinService;
-                    } else {
-                        return service;
-                    }
-                }
-            });
+        /* Look first for an app-override renderer,
+         * if not specified or present, then look for marlin.
+         */
+        GetPropertyAction gpa =
+            new GetPropertyAction("sun.java2d.renderer");
+        String reClass = AccessController.doPrivileged(gpa);
+        if (reClass != null) {
+            try {
+                Class<?> cls = Class.forName(reClass);
+                reImpl = (RenderingEngine) cls.newInstance();
+            } catch (ReflectiveOperationException ignored0) {
+            }
+        }
+        if (reImpl == null) {
+            final String marlinREClass = "sun.java2d.marlin.MarlinRenderingEngine";
+            try {
+                Class<?> cls = Class.forName(marlinREClass);
+                reImpl = (RenderingEngine) cls.newInstance();
+            } catch (ReflectiveOperationException ignored1) {
+            }
+        }
 
         if (reImpl == null) {
             throw new InternalError("No RenderingEngine module found");
         }
 
-        GetPropertyAction gpa =
-            new GetPropertyAction("sun.java2d.renderer.trace");
+        gpa = new GetPropertyAction("sun.java2d.renderer.verbose");
+        String verbose = AccessController.doPrivileged(gpa);
+        if (verbose != null && verbose.startsWith("t")) {
+            System.out.println("RenderingEngine = "+reImpl);
+        }
+
+        gpa = new GetPropertyAction("sun.java2d.renderer.trace");
         String reTrace = AccessController.doPrivileged(gpa);
         if (reTrace != null) {
             reImpl = new Tracer(reImpl);
@@ -204,11 +191,11 @@
      * The specified {@code src} {@link Shape} is widened according
      * to the parameters specified by the {@link BasicStroke} object.
      * Adjustments are made to the path as appropriate for the
-     * {@link VALUE_STROKE_NORMALIZE} hint if the {@code normalize}
-     * boolean parameter is true.
+     * {@link java.awt.RenderingHints#VALUE_STROKE_NORMALIZE} hint if the
+     * {@code normalize} boolean parameter is true.
      * Adjustments are made to the path as appropriate for the
-     * {@link VALUE_ANTIALIAS_ON} hint if the {@code antialias}
-     * boolean parameter is true.
+     * {@link java.awt.RenderingHints#VALUE_ANTIALIAS_ON} hint if the
+     * {@code antialias} boolean parameter is true.
      * <p>
      * The geometry of the widened path is forwarded to the indicated
      * {@link PathConsumer2D} object as it is calculated.
diff -Nur zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/pisces/META-INF/services/sun.java2d.pipe.RenderingEngine jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/pisces/META-INF/services/sun.java2d.pipe.RenderingEngine
--- zulu/m01.8143849.webrev/raw_files/new/src/share/classes/sun/java2d/pisces/META-INF/services/sun.java2d.pipe.RenderingEngine	2019-09-19 20:53:23.000000000 +0200
+++ jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/share/classes/sun/java2d/pisces/META-INF/services/sun.java2d.pipe.RenderingEngine	1970-01-01 01:00:00.000000000 +0100
@@ -1,5 +0,0 @@
-#  Pisces Rendering Engine module
-sun.java2d.pisces.PiscesRenderingEngine
-
-#  Marlin Rendering Engine module
-sun.java2d.marlin.MarlinRenderingEngine
diff -Nur zulu/m01.8143849.webrev/raw_files/new/src/solaris/classes/sun/java2d/pisces/META-INF/services/sun.java2d.pipe.RenderingEngine jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/solaris/classes/sun/java2d/pisces/META-INF/services/sun.java2d.pipe.RenderingEngine
--- zulu/m01.8143849.webrev/raw_files/new/src/solaris/classes/sun/java2d/pisces/META-INF/services/sun.java2d.pipe.RenderingEngine	2019-09-19 20:53:24.000000000 +0200
+++ jdk/m01.8143849.webrev/raw_files/new/src/java.desktop/solaris/classes/sun/java2d/pisces/META-INF/services/sun.java2d.pipe.RenderingEngine	1970-01-01 01:00:00.000000000 +0100
@@ -1,8 +0,0 @@
-# Jules Rendering Engine module
-sun.java2d.jules.JulesRenderingEngine
-
-#  Pisces Rendering Engine module
-sun.java2d.pisces.PiscesRenderingEngine
-
-#  Marlin Rendering Engine module
-sun.java2d.marlin.MarlinRenderingEngine

diff -Nur zulu/m01.8143849.webrev/raw_files/new/test/ jdk/m01.8143849.webrev/raw_files/new/test/
